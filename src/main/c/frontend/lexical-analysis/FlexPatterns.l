%{

#include "FlexActions.h"

%}

/**
 * Enable start condition manipulation functions.
 */
%option stack

/**
 * Flex contexts (a.k.a. start conditions).
 *
 * @see https://westes.github.io/flex/manual/Start-Conditions.html
 */

/* %x Contexts */
%x CANA
%x CODE

%x UNORDEREDLIST
%x ORDEREDLIST
%x TABLE

%x BOLD
%x BOLDITALIC
%x BOLDITALICUNDERLINE
%x BOLDUNDERLINE
%x BOLDUNDERLINEITALIC

%x ITALIC
%x ITALICBOLD
%x ITALICBOLDUNDERLINE
%x ITALICUNDERLINE
%x ITALICUNDERLINEBOLD

%x UNDERLINE
%x UNDERLINEBOLD
%x UNDERLINEBOLDITALIC
%x UNDERLINEITALIC
%x UNDERLINEITALICBOLD


/**
 * Reusable patterns.
 *
 * @see https://westes.github.io/flex/manual/Matching.html
 * @see https://westes.github.io/flex/manual/Patterns.html
 */

TEXT [][a-zA-Z0-9*@&=+$/?%#_~|<>{}()'"\\!:;.,\-]+
CANA üëÆ‚Äç‚ôÇÔ∏è
NOCANA [^üëÆ‚Äç‚ôÇÔ∏è \n]+
CODE üíª
NOCODE [^üíª \n]+

UNORDEREDLIST üí•
NOUNORDEREDLIST [^üí•üéØ \n]+
ORDEREDLIST üî¢
NOORDEREDLIST [^üî¢üéØ \n]+
TABLE üìä
NOTABLE [^üìäü§∏‚Äç‚ôÇÔ∏è \n]+

BOLD üë®‚Äçü¶≤
ITALIC ü§å
UNDERLINE üìâ
NOBOLDITALICUNDERLINE [^üë®‚Äçü¶≤ü§åüìâ\n]+

%%

"ü§¥"                                            { return TitleLexemeAction(createLexicalAnalyzerContext()); }
"üë¥"                                            { return Heading1LexemeAction(createLexicalAnalyzerContext()); }
"üë®"                                            { return Heading2LexemeAction(createLexicalAnalyzerContext()); }
"üë∂"                                            { return Heading3LexemeAction(createLexicalAnalyzerContext()); }
"üêá"                                            { return PageSkipLexemeAction(createLexicalAnalyzerContext()); }
"üí•"                                            { BEGIN(UNORDEREDLIST);return UnorderedListLexemeAction(createLexicalAnalyzerContext()); }
"üî¢"                                            { BEGIN(ORDEREDLIST); return OrderedListLexemeAction(createLexicalAnalyzerContext()); }
"üìä"                                            { BEGIN(TABLE); return TableLexemeAction(createLexicalAnalyzerContext()); }
"üì∑"                                            { return ImageLexemeAction(createLexicalAnalyzerContext()); }
"üë®‚Äçü¶≤"                                            { BEGIN(BOLD);return BoldLexemeAction(createLexicalAnalyzerContext()); }
"ü§å"                                            { BEGIN(ITALIC); return ItalicLexemeAction(createLexicalAnalyzerContext()); }
"üìâ"                                            { BEGIN(UNDERLINE); return UnderlineLexemeAction(createLexicalAnalyzerContext()); }
"üíª"                                            { BEGIN(CODE); return CodeLexemeAction(createLexicalAnalyzerContext()); }
"üëÆ‚Äç‚ôÇÔ∏è"                                            { BEGIN(CANA); return EscapedLexemeAction(createLexicalAnalyzerContext()); }

<CANA>"üëÆ‚Äç‚ôÇÔ∏è"                                      { BEGIN(INITIAL); return EscapedLexemeAction(createLexicalAnalyzerContext()); }
<CANA>[\n]+                                     { return StringLexemeAction(createLexicalAnalyzerContext()); }
<CANA>[ ]+                                      { IgnoredLexemeAction(createLexicalAnalyzerContext()); }
<CANA>{NOCANA}                                  { return StringLexemeAction(createLexicalAnalyzerContext()); }

<CODE>"üíª"                                      { BEGIN(INITIAL); return CodeLexemeAction(createLexicalAnalyzerContext()); }
<CODE>[\n ]+                                    { return StringLexemeAction(createLexicalAnalyzerContext()); }
<CODE>{NOCODE}                                  { return StringLexemeAction(createLexicalAnalyzerContext()); }

<UNORDEREDLIST>"üí•"                             { BEGIN(INITIAL); return UnorderedListLexemeAction(createLexicalAnalyzerContext()); }
<UNORDEREDLIST>"üéØ"                             { return ListItemLexemeAction(createLexicalAnalyzerContext()); }
<UNORDEREDLIST>[[:space:]]                      { IgnoredLexemeAction(createLexicalAnalyzerContext()); }
<UNORDEREDLIST>{NOUNORDEREDLIST}                { return StringLexemeAction(createLexicalAnalyzerContext()); }

<ORDEREDLIST>"üî¢"                               { BEGIN(INITIAL); return OrderedListLexemeAction(createLexicalAnalyzerContext()); }
<ORDEREDLIST>"üéØ"                               { return ListItemLexemeAction(createLexicalAnalyzerContext()); }
<ORDEREDLIST>[[:space:]]                        { IgnoredLexemeAction(createLexicalAnalyzerContext()); }
<ORDEREDLIST>{NOORDEREDLIST}                    { return StringLexemeAction(createLexicalAnalyzerContext()); }

<TABLE>"üìä"                                     { BEGIN(INITIAL); return TableLexemeAction(createLexicalAnalyzerContext()); }
<TABLE>"ü§∏‚Äç‚ôÇÔ∏è"                                     { return CellSeparatorLexemeAction(createLexicalAnalyzerContext()); }
<TABLE>[[:space:]]                              { IgnoredLexemeAction(createLexicalAnalyzerContext()); }
<TABLE>{NOTABLE}                                { return StringLexemeAction(createLexicalAnalyzerContext()); }

<BOLD>"üë®‚Äçü¶≤"                                      { BEGIN(INITIAL); return BoldLexemeAction(createLexicalAnalyzerContext()); }
<BOLD>"ü§å"                                      { BEGIN(BOLDITALIC); return ItalicLexemeAction(createLexicalAnalyzerContext()); }
<BOLD>"üìâ"                                      { BEGIN(BOLDUNDERLINE); return UnderlineLexemeAction(createLexicalAnalyzerContext()); }
<BOLD>[\n]+                                     { IgnoredLexemeAction(createLexicalAnalyzerContext()); }
<BOLD>{NOBOLDITALICUNDERLINE}                   { return StringLexemeAction(createLexicalAnalyzerContext()); }

<BOLDITALIC>"ü§å"                                { BEGIN(BOLD); return ItalicLexemeAction(createLexicalAnalyzerContext()); }
<BOLDITALIC>"üìâ"                                { BEGIN(BOLDITALICUNDERLINE); return UnderlineLexemeAction(createLexicalAnalyzerContext()); }
<BOLDITALIC>[\n]+                               { IgnoredLexemeAction(createLexicalAnalyzerContext()); }
<BOLDITALIC>{NOBOLDITALICUNDERLINE}             { return StringLexemeAction(createLexicalAnalyzerContext()); }

<BOLDITALICUNDERLINE>"üìâ"                       { BEGIN(BOLDITALIC); return UnderlineLexemeAction(createLexicalAnalyzerContext());  }
<BOLDITALICUNDERLINE>[\n]+                      { IgnoredLexemeAction(createLexicalAnalyzerContext()); }
<BOLDITALICUNDERLINE>{NOBOLDITALICUNDERLINE}    { return StringLexemeAction(createLexicalAnalyzerContext()); }

<BOLDUNDERLINE>"üìâ"                             { BEGIN(BOLD); return UnderlineLexemeAction(createLexicalAnalyzerContext()); }
<BOLDUNDERLINE>"ü§å"                             { BEGIN(BOLDUNDERLINEITALIC); return ItalicLexemeAction(createLexicalAnalyzerContext()); }
<BOLDUNDERLINE>[\n]+                            { IgnoredLexemeAction(createLexicalAnalyzerContext()); }
<BOLDUNDERLINE>{NOBOLDITALICUNDERLINE}          { return StringLexemeAction(createLexicalAnalyzerContext()); }

<BOLDUNDERLINEITALIC>"ü§å"                       { BEGIN(BOLDUNDERLINE); return ItalicLexemeAction(createLexicalAnalyzerContext());  }
<BOLDUNDERLINEITALIC>[\n]+                      { IgnoredLexemeAction(createLexicalAnalyzerContext()); }
<BOLDUNDERLINEITALIC>{NOBOLDITALICUNDERLINE}    { return StringLexemeAction(createLexicalAnalyzerContext()); }

<ITALIC>"ü§å"                                    { BEGIN(INITIAL); return ItalicLexemeAction(createLexicalAnalyzerContext()); }
<ITALIC>"üë®‚Äçü¶≤"                                    { BEGIN(ITALICBOLD); return BoldLexemeAction(createLexicalAnalyzerContext()); }
<ITALIC>"üìâ"                                    { BEGIN(ITALICUNDERLINE); return UnderlineLexemeAction(createLexicalAnalyzerContext()); }
<ITALIC>[\n]+                                   { IgnoredLexemeAction(createLexicalAnalyzerContext()); }
<ITALIC>{NOBOLDITALICUNDERLINE}                 { return StringLexemeAction(createLexicalAnalyzerContext()); }

<ITALICBOLD>"üë®‚Äçü¶≤"                                { BEGIN(ITALIC); return BoldLexemeAction(createLexicalAnalyzerContext()); }
<ITALICBOLD>"üìâ"                                { BEGIN(ITALICBOLDUNDERLINE); return UnderlineLexemeAction(createLexicalAnalyzerContext()); }
<ITALICBOLD>[\n]+                               { IgnoredLexemeAction(createLexicalAnalyzerContext()); }
<ITALICBOLD>{NOBOLDITALICUNDERLINE}             { return StringLexemeAction(createLexicalAnalyzerContext()); }

<ITALICBOLDUNDERLINE>"üìâ"                       { BEGIN(ITALICBOLD); return UnderlineLexemeAction(createLexicalAnalyzerContext());  }
<ITALICBOLDUNDERLINE>[\n]+                      { IgnoredLexemeAction(createLexicalAnalyzerContext()); }
<ITALICBOLDUNDERLINE>{NOBOLDITALICUNDERLINE}    { return StringLexemeAction(createLexicalAnalyzerContext()); }

<ITALICUNDERLINE>"üìâ"                           { BEGIN(ITALIC); return UnderlineLexemeAction(createLexicalAnalyzerContext()); }
<ITALICUNDERLINE>"üë®‚Äçü¶≤"                           { BEGIN(ITALICUNDERLINEBOLD); return BoldLexemeAction(createLexicalAnalyzerContext()); }
<ITALICUNDERLINE>[\n]+                          { IgnoredLexemeAction(createLexicalAnalyzerContext()); }
<ITALICUNDERLINE>{NOBOLDITALICUNDERLINE}        { return StringLexemeAction(createLexicalAnalyzerContext()); }

<ITALICUNDERLINEBOLD>"üë®‚Äçü¶≤"                       { BEGIN(ITALICUNDERLINE); return BoldLexemeAction(createLexicalAnalyzerContext());  }
<ITALICUNDERLINEBOLD>[\n]+                      { IgnoredLexemeAction(createLexicalAnalyzerContext()); }
<ITALICUNDERLINEBOLD>{NOBOLDITALICUNDERLINE}    { return StringLexemeAction(createLexicalAnalyzerContext()); }

<UNDERLINE>"üìâ"                                 { BEGIN(INITIAL); return UnderlineLexemeAction(createLexicalAnalyzerContext()); }
<UNDERLINE>"üë®‚Äçü¶≤"                                 { BEGIN(UNDERLINEBOLD); return BoldLexemeAction(createLexicalAnalyzerContext()); }
<UNDERLINE>"ü§å"                                 { BEGIN(UNDERLINEITALIC); return ItalicLexemeAction(createLexicalAnalyzerContext()); }
<UNDERLINE>[\n]+                                { IgnoredLexemeAction(createLexicalAnalyzerContext()); }
<UNDERLINE>{NOBOLDITALICUNDERLINE}              { return StringLexemeAction(createLexicalAnalyzerContext()); }

<UNDERLINEBOLD>"üë®‚Äçü¶≤"                             { BEGIN(UNDERLINE); return BoldLexemeAction(createLexicalAnalyzerContext()); }
<UNDERLINEBOLD>"ü§å"                             { BEGIN(UNDERLINEBOLDITALIC); return ItalicLexemeAction(createLexicalAnalyzerContext()); }
<UNDERLINEBOLD>[\n]+                            { IgnoredLexemeAction(createLexicalAnalyzerContext()); }
<UNDERLINEBOLD>{NOBOLDITALICUNDERLINE}          { return StringLexemeAction(createLexicalAnalyzerContext()); }

<UNDERLINEBOLDITALIC>"ü§å"                       { BEGIN(UNDERLINEBOLD); return ItalicLexemeAction(createLexicalAnalyzerContext());  }
<UNDERLINEBOLDITALIC>[\n]+                      { IgnoredLexemeAction(createLexicalAnalyzerContext()); }
<UNDERLINEBOLDITALIC>{NOBOLDITALICUNDERLINE}    { return StringLexemeAction(createLexicalAnalyzerContext()); }

<UNDERLINEITALIC>"ü§å"                           { BEGIN(UNDERLINE); return ItalicLexemeAction(createLexicalAnalyzerContext()); }
<UNDERLINEITALIC>"üë®‚Äçü¶≤"                           { BEGIN(UNDERLINEITALICBOLD); return BoldLexemeAction(createLexicalAnalyzerContext()); }
<UNDERLINEITALIC>[\n]+                          { IgnoredLexemeAction(createLexicalAnalyzerContext()); }
<UNDERLINEITALIC>{NOBOLDITALICUNDERLINE}        { return StringLexemeAction(createLexicalAnalyzerContext()); }

<UNDERLINEITALICBOLD>"üë®‚Äçü¶≤"                       { BEGIN(UNDERLINEITALIC); return BoldLexemeAction(createLexicalAnalyzerContext());  }
<UNDERLINEITALICBOLD>[\n]+                      { IgnoredLexemeAction(createLexicalAnalyzerContext()); }
<UNDERLINEITALICBOLD>{NOBOLDITALICUNDERLINE}    { return StringLexemeAction(createLexicalAnalyzerContext()); }

{TEXT}									        { return StringLexemeAction(createLexicalAnalyzerContext()); }
[[:space:]]                                     { return StringLexemeAction(createLexicalAnalyzerContext()); }
.                                               { return UnknownLexemeAction(createLexicalAnalyzerContext()); }

%%

#include "FlexExport.h"